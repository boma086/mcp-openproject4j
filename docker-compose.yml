# OpenProject MCP Server Docker Compose Configuration
# OpenProject MCP服务器Docker Compose配置

version: '3.8'

services:
  # OpenProject MCP Server
  # OpenProject MCP服务器
  openproject-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: openproject-mcp-server
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - OPENPROJECT_BASE_URL=${OPENPROJECT_BASE_URL}
      - OPENPROJECT_API_KEY=${OPENPROJECT_API_KEY}
      - OPENPROJECT_TIMEOUT=${OPENPROJECT_TIMEOUT:-30000}
      - OPENPROJECT_RATE_LIMIT=${OPENPROJECT_RATE_LIMIT:-100}
      - MCP_USERNAME=${MCP_USERNAME:-admin}
      - MCP_PASSWORD=${MCP_PASSWORD:-password}
      - JAVA_OPTS=-Xmx512m -Xms256m
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - openproject-mcp-network
    depends_on:
      - openproject-mcp-cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching
  # Redis缓存服务
  openproject-mcp-cache:
    image: redis:7-alpine
    container_name: openproject-mcp-cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - openproject-mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  # Prometheus监控服务
  openproject-mcp-prometheus:
    image: prom/prometheus:latest
    container_name: openproject-mcp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - openproject-mcp-network

  # Grafana for visualization
  # Grafana可视化服务
  openproject-mcp-grafana:
    image: grafana/grafana:latest
    container_name: openproject-mcp-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - openproject-mcp-network
    depends_on:
      - openproject-mcp-prometheus

  # Nginx reverse proxy (optional)
  # Nginx反向代理（可选）
  openproject-mcp-nginx:
    image: nginx:alpine
    container_name: openproject-mcp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - openproject-mcp-network
    depends_on:
      - openproject-mcp-server
    profiles:
      - nginx

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  openproject-mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16